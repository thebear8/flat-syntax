{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "flat",
  "patterns": [
    {
      "include": "#module_declaration"
    },
    {
      "include": "#struct_declaration"
    },
    {
      "include": "#constraint_declaration"
    },
    {
      "include": "#function_declaration"
    }
  ],
  "repository": {
    "module_declaration": {
      "name": "meta.declaration.module.flat",
      "match": "(?:((?:module))(?:(?:\\s*))((?:(?:[a-zA-Z_][a-zA-Z0-9_]*))(?:(?:(?:\\.)(?:(?:[a-zA-Z_][a-zA-Z0-9_]*)))*)))",
      "captures": {
        "1": {
          "name": "storage.type.module.flat"
        },
        "2": {
          "name": "entity.name.module.flat"
        }
      }
    },
    "struct_declaration": {
      "name": "meta.declaration.struct.flat",
      "begin": "(?:((?:struct))(?:(?:\\s*))((?:(?:[a-zA-Z_][a-zA-Z0-9_]*)))(?:(?:\\s*))(?:(?:((?:(?:<)(?:(?:\\s*))(?:(?:(?:(?:\\s*))(?:(?:[a-zA-Z_][a-zA-Z0-9_]*))(?:(?:(?:(?:\\s*))(?:,)(?:(?:\\s*))(?:(?:[a-zA-Z_][a-zA-Z0-9_]*)))*))?)(?:(?:\\s*))(?:>))))?)(?:(?:\\s*))(?:\\{))",
      "beginCaptures": {
        "1": {
          "name": "storage.type.struct.flat"
        },
        "2": {
          "name": "entity.name.struct.flat"
        },
        "3": {
          "patterns": [
            {
              "name": "entity.name.type.flat",
              "match": "((?:(?:[a-zA-Z_][a-zA-Z0-9_]*)))"
            }
          ]
        }
      },
      "end": "(?:(?:\\}))"
    },
    "constraint_declaration": {
      "name": "meta.declaration.constraint.flat",
      "begin": "(?:((?:constraint))(?:(?:\\s*))((?:(?:[a-zA-Z_][a-zA-Z0-9_]*)))(?:(?:\\s*))(?:(?:((?:(?:<)(?:(?:\\s*))(?:(?:(?:(?:\\s*))(?:(?:[a-zA-Z_][a-zA-Z0-9_]*))(?:(?:(?:(?:\\s*))(?:,)(?:(?:\\s*))(?:(?:[a-zA-Z_][a-zA-Z0-9_]*)))*))?)(?:(?:\\s*))(?:>))))?)(?:(?:\\s*))(?:\\{))",
      "beginCaptures": {
        "1": {
          "name": "storage.type.constraint.flat"
        },
        "2": {
          "name": "entity.name.constraint.flat"
        },
        "3": {
          "patterns": [
            {
              "name": "entity.name.type.flat",
              "match": "((?:(?:[a-zA-Z_][a-zA-Z0-9_]*)))"
            }
          ]
        }
      },
      "end": "(?:(?:\\}))"
    },
    "function_declaration": {
      "name": "meta.declaration.function.flat",
      "begin": "(?:((?:fn)))",
      "beginCaptures": {
        "1": {
          "name": "storage.type.function.flat"
        }
      },
      "patterns": [
        {
          "name": "meta.declaration.function.typeparams.flat",
          "begin": "(?:(?:<))",
          "patterns": [
            {
              "name": "entity.name.type.flat",
              "match": "((?:(?:[a-zA-Z_][a-zA-Z0-9_]*)))"
            }
          ],
          "end": "(?:(?:>))"
        },
        {
          "name": "meta.declaration.function.requirements.flat",
          "begin": "(?:(?:\\[))",
          "patterns": [
            {
              "begin": "(?:((?:(?:[a-zA-Z_][a-zA-Z0-9_]*)))(?:(?:\\s*))(?:<))",
              "beginCaptures": {
                "1": {
                  "name": "entity.name.constraint.flat"
                }
              },
              "patterns": [
                {
                  "include": "#type"
                },
                {
                  "match": "(?:(?:,))"
                }
              ],
              "end": "(?:(?:>))"
            }
          ],
          "end": "(?:(?:\\]))"
        },
        {
          "name": "meta.declaration.function.parameters.flat",
          "begin": "(?:(?:\\())",
          "patterns": [
            {
              "begin": "(?:((?:(?:[a-zA-Z_][a-zA-Z0-9_]*))))",
              "beginCaptures": {
                "1": {
                  "name": "variable.parameter.flat"
                }
              },
              "patterns": [
                {
                  "match": "(?:(?::))"
                },
                {
                  "include": "#type"
                }
              ],
              "end": "(?:(?:,)|(?=(?:(?:\\)))))"
            }
          ],
          "end": "(?:(?:\\)))"
        },
        {
          "name": "meta.declaration.function.body.flat",
          "begin": "(?=(?:(?:\\{)))",
          "patterns": [
            {
              "include": "#block_statement"
            }
          ],
          "end": "(?<=(?:(?:\\})))"
        },
        {
          "name": "entity.name.function.flat",
          "match": "(?:(?:[a-zA-Z_][a-zA-Z0-9_]*))"
        },
        {
          "name": "meta.declaration.function.result.flat",
          "begin": "(?:(?::))",
          "patterns": [
            {
              "include": "#type"
            }
          ],
          "end": "(?=(?:(?:\\{)))"
        }
      ],
      "end": "(?:(?:\\}))"
    },
    "type": {
      "name": "meta.type.flat",
      "begin": "((?:(?:[a-zA-Z_][a-zA-Z0-9_]*)))",
      "beginCaptures": {
        "1": {
          "name": "entity.name.type.flat"
        }
      },
      "patterns": [
        {
          "begin": "(?:(?:<))",
          "patterns": [
            {
              "include": "#type"
            },
            {
              "match": "(?:(?:,))"
            }
          ],
          "end": "(?:(?:>))"
        },
        {
          "match": "(?:(?:(?:(?:\\*)|(?:\\[\\])))+)"
        }
      ],
      "end": "(?!(?:(?:<)(?:\\*)(?:\\[\\])))"
    },
    "statement": {
      "patterns": [
        {
          "include": "#block_statement"
        },
        {
          "include": "#variable_statement"
        },
        {
          "include": "#return_statement"
        },
        {
          "include": "#if_statement"
        },
        {
          "include": "#while_statement"
        },
        {
          "include": "#expression_statement"
        }
      ]
    },
    "block_statement": {
      "name": "meta.statement.block.flat",
      "begin": "(?:(?:\\{))",
      "patterns": [
        {
          "include": "#statement"
        }
      ],
      "end": "(?:(?:\\}))"
    },
    "variable_statement": {
      "name": "meta.statement.variable.flat",
      "begin": "(?:(?:let))",
      "beginCaptures": {
        "0": {
          "name": "storage.type.let.flat"
        }
      },
      "patterns": [
        {
          "begin": "(?:((?:(?:[a-zA-Z_][a-zA-Z0-9_]*)))(?:(?:\\s*))(?:=))",
          "beginCaptures": {
            "1": {
              "name": "variable.other.flat"
            }
          },
          "patterns": [
            {
              "include": "#expression"
            }
          ],
          "end": "(?<!(?:(?:(?:[a-zA-Z_][a-zA-Z0-9_]*))(?:(?:\\s*))(?:=)))"
        }
      ],
      "end": "(?!(?:(?:(?:[a-zA-Z_][a-zA-Z0-9_]*))(?:(?:\\s*))(?:=)))"
    },
    "return_statement": {
      "name": "meta.statement.return.flat",
      "begin": "(?:(?:return))",
      "beginCaptures": {
        "0": {
          "name": "keyword.control.return.flat"
        }
      },
      "patterns": [
        {
          "include": "#expression"
        }
      ],
      "end": "(?<!(?:(?:return)))"
    },
    "if_statement": {
      "name": "meta.statement.if.flat",
      "begin": "(?:(?:if))",
      "beginCaptures": {
        "0": {
          "name": "keyword.control.if.flat"
        }
      },
      "patterns": [
        {
          "begin": "(?:(?:\\())",
          "patterns": [
            {
              "include": "#expression"
            }
          ],
          "end": "(?:(?:\\)))"
        },
        {
          "begin": "(?:(?:else))",
          "patterns": [
            {
              "include": "#statement"
            }
          ]
        },
        {
          "include": "#statement"
        }
      ],
      "end": "(?:(?<!(?:(?:(?:if)|(?:\\)))))(?!(?:(?:(?:\\()|(?:else)))))"
    },
    "while_statement": {
      "name": "meta.statement.while.flat",
      "begin": "(?:(?:while))",
      "beginCaptures": {
        "0": {
          "name": "keyword.control.while.flat"
        }
      },
      "patterns": [
        {
          "begin": "(?:(?:\\())",
          "patterns": [
            {
              "include": "#expression"
            }
          ],
          "end": "(?:(?:\\)))"
        },
        {
          "include": "#statement"
        }
      ],
      "end": "(?:(?<!(?:(?:(?:while)|(?:\\))))))"
    },
    "expression_statement": {
      "patterns": [
        {
          "include": "#expression"
        }
      ]
    },
    "expression": {
      "patterns": [
        {
          "include": "#L10"
        }
      ]
    },
    "L0": {
      "name": "meta.expression.L0.flat",
      "patterns": [
        {
          "name": "meta.expression.group.flat",
          "begin": "(?:(?:\\())",
          "patterns": [
            {
              "include": "#expression"
            }
          ],
          "end": "(?:(?:\\)))"
        },
        {
          "name": "meta.expression.integer.flat",
          "match": "(?:((?:(?:(?:0b)(?:(?:(?:[0-1]))+))|(?:(?:0x)(?:(?:(?:[0-9a-fA-F]))+))|(?:(?:(?:(?:[0-9]))+))))((?:(?:(?:(?:u8)|(?:u16)|(?:u32)|(?:u64)|(?:i8)|(?:i16)|(?:i32)|(?:i64)))?)))",
          "captures": {
            "1": {
              "name": "constant.numeric.flat"
            },
            "2": {
              "name": "keyword.operator.flat"
            }
          }
        },
        {
          "name": "meta.expression.bool.flat",
          "match": "((?:(?:true)|(?:false)))",
          "captures": {
            "1": {
              "name": "constant.language.flat"
            }
          }
        },
        {
          "name": "string.quoted.single.flat",
          "begin": "(?:(?:'))",
          "end": "(?:(?<!(?:(?:\\\\)))(?:'))"
        },
        {
          "name": "string.quoted.double.flat",
          "begin": "(?:(?:\"))",
          "end": "(?:(?<!(?:(?:\\\\)))(?:\"))"
        },
        {
          "name": "meta.expression.identifier.flat",
          "begin": "((?:(?:[a-zA-Z_][a-zA-Z0-9_]*)))",
          "beginCaptures": {
            "1": {
              "name": "variable.other.flat"
            }
          },
          "patterns": [
            {
              "begin": "(?:(?:\\{))",
              "patterns": [
                {
                  "name": "meta.expression.struct.flat",
                  "begin": "((?:(?:[a-zA-Z_][a-zA-Z0-9_]*)))",
                  "beginCaptures": {
                    "1": {
                      "name": "variable.other.flat"
                    }
                  },
                  "patterns": [
                    {
                      "begin": "(?:(?::))",
                      "patterns": [
                        {
                          "include": "#expression"
                        }
                      ],
                      "end": "(?=(?:(?:(?:,)|(?:\\}))))"
                    }
                  ],
                  "end": "(?=(?:(?:(?:,)|(?:\\}))))"
                }
              ],
              "end": "(?:(?:\\}))"
            }
          ],
          "end": "(?!(?:(?:\\{)))"
        }
      ]
    },
    "L1": {
      "name": "meta.expression.L1.flat",
      "patterns": [
        {
          "include": "#L0"
        },
        {
          "name": "meta.expression.call.flat",
          "begin": "(?:(?:\\())",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.flat"
            }
          },
          "patterns": [
            {
              "include": "#expression"
            },
            {
              "match": "(?:(?:,))"
            }
          ],
          "end": "(?:(?:\\)))",
          "endCaptures": {
            "0": {
              "name": "keyword.operator.flat"
            }
          }
        },
        {
          "name": "meta.expression.index.flat",
          "begin": "(?:(?:\\[))",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.flat"
            }
          },
          "patterns": [
            {
              "include": "#expression"
            },
            {
              "match": "(?:(?:,))"
            }
          ],
          "end": "(?:(?:\\]))",
          "endCaptures": {
            "0": {
              "name": "keyword.operator.flat"
            }
          }
        },
        {
          "name": "meta.expression.field.flat",
          "begin": "(?:(?:\\.))",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.flat"
            }
          },
          "patterns": [
            {
              "name": "variable.other.flat",
              "match": "(?:(?:[a-zA-Z_][a-zA-Z0-9_]*))"
            }
          ],
          "end": "(?<!(?:(?:\\.)))"
        }
      ]
    },
    "L2": {
      "name": "meta.expression.L2.flat",
      "patterns": [
        {
          "name": "meta.expression.pos.flat",
          "begin": "(?:(?:\\+))",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.flat"
            }
          },
          "patterns": [
            {
              "include": "#L2"
            }
          ],
          "end": "(?<!(?:(?:\\+)))"
        },
        {
          "name": "meta.expression.neg.flat",
          "begin": "(?:(?:-))",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.flat"
            }
          },
          "patterns": [
            {
              "include": "#L2"
            }
          ],
          "end": "(?<!(?:(?:-)))"
        },
        {
          "name": "meta.expression.lnot.flat",
          "begin": "(?:(?:!))",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.flat"
            }
          },
          "patterns": [
            {
              "include": "#L2"
            }
          ],
          "end": "(?<!(?:(?:!)))"
        },
        {
          "name": "meta.expression.bnot.flat",
          "begin": "(?:(?:~))",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.flat"
            }
          },
          "patterns": [
            {
              "include": "#L2"
            }
          ],
          "end": "(?!(?:(?:~)))"
        },
        {
          "include": "#L1"
        }
      ]
    },
    "L3": {
      "name": "meta.expression.L3.flat",
      "patterns": [
        {
          "include": "#L2"
        },
        {
          "name": "meta.expression.mul.flat",
          "begin": "(?:(?:\\*))",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.flat"
            }
          },
          "patterns": [
            {
              "include": "#L2"
            }
          ],
          "end": "(?<!(?:(?:\\*)))"
        },
        {
          "name": "meta.expression.div.flat",
          "begin": "(?:(?:/))",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.flat"
            }
          },
          "patterns": [
            {
              "include": "#L2"
            }
          ],
          "end": "(?<!(?:(?:/)))"
        },
        {
          "name": "meta.expression.mod.flat",
          "begin": "(?:(?:%))",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.flat"
            }
          },
          "patterns": [
            {
              "include": "#L2"
            }
          ],
          "end": "(?<!(?:(?:%)))"
        }
      ]
    },
    "L4": {
      "name": "meta.expression.L4.flat",
      "patterns": [
        {
          "include": "#L3"
        },
        {
          "name": "meta.expression.add.flat",
          "begin": "(?:(?:\\+))",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.flat"
            }
          },
          "patterns": [
            {
              "include": "#L3"
            }
          ],
          "end": "(?<!(?:(?:\\+)))"
        },
        {
          "name": "meta.expression.sub.flat",
          "begin": "(?:(?:-))",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.flat"
            }
          },
          "patterns": [
            {
              "include": "#L3"
            }
          ],
          "end": "(?<!(?:(?:-)))"
        }
      ]
    },
    "L5": {
      "name": "meta.expression.L5.flat",
      "patterns": [
        {
          "include": "#L4"
        },
        {
          "name": "meta.expression.shl.flat",
          "begin": "(?:(?:<<))",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.flat"
            }
          },
          "patterns": [
            {
              "include": "#L4"
            }
          ],
          "end": "(?<!(?:(?:<<)))"
        },
        {
          "name": "meta.expression.shr.flat",
          "begin": "(?:(?:>>))",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.flat"
            }
          },
          "patterns": [
            {
              "include": "#L4"
            }
          ],
          "end": "(?<!(?:(?:>>)))"
        }
      ]
    },
    "L6": {
      "name": "meta.expression.L6.flat",
      "patterns": [
        {
          "include": "#L5"
        },
        {
          "name": "meta.expression.band.flat",
          "begin": "(?:(?:&)(?!(?:(?:&&))))",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.flat"
            }
          },
          "patterns": [
            {
              "include": "#L5"
            }
          ],
          "end": "(?<!(?:(?:&)))"
        },
        {
          "name": "meta.expression.bor.flat",
          "begin": "(?:(?:\\|)(?!(?:(?:\\|\\|))))",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.flat"
            }
          },
          "patterns": [
            {
              "include": "#L5"
            }
          ],
          "end": "(?<!(?:(?:\\|)))"
        },
        {
          "name": "meta.expression.bxor.flat",
          "begin": "(?:(?:\\^))",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.flat"
            }
          },
          "patterns": [
            {
              "include": "#L5"
            }
          ],
          "end": "(?<!(?:(?:\\^)))"
        }
      ]
    },
    "L7": {
      "name": "meta.expression.L7.flat",
      "patterns": [
        {
          "include": "#L6"
        },
        {
          "name": "meta.expression.eq.flat",
          "begin": "(?:(?:==))",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.flat"
            }
          },
          "patterns": [
            {
              "include": "#L6"
            }
          ],
          "end": "(?<!(?:(?:==)))"
        },
        {
          "name": "meta.expression.neq.flat",
          "begin": "(?:(?:!=))",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.flat"
            }
          },
          "patterns": [
            {
              "include": "#L6"
            }
          ],
          "end": "(?<!(?:(?:!=)))"
        },
        {
          "name": "meta.expression.lt.flat",
          "begin": "(?:(?:<)(?!(?:(?:<<))))",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.flat"
            }
          },
          "patterns": [
            {
              "include": "#L6"
            }
          ],
          "end": "(?<!(?:(?:<)))"
        },
        {
          "name": "meta.expression.gt.flat",
          "begin": "(?:(?:>)(?!(?:(?:>>))))",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.flat"
            }
          },
          "patterns": [
            {
              "include": "#L6"
            }
          ],
          "end": "(?<!(?:(?:>)))"
        },
        {
          "name": "meta.expression.lteq.flat",
          "begin": "(?:(?:<=))",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.flat"
            }
          },
          "patterns": [
            {
              "include": "#L6"
            }
          ],
          "end": "(?<!(?:(?:<=)))"
        },
        {
          "name": "meta.expression.gteq.flat",
          "begin": "(?:(?:>=))",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.flat"
            }
          },
          "patterns": [
            {
              "include": "#L6"
            }
          ],
          "end": "(?<!(?:(?:>=)))"
        }
      ]
    },
    "L8": {
      "name": "meta.expression.L8.flat",
      "patterns": [
        {
          "include": "#L7"
        },
        {
          "name": "meta.expression.land.flat",
          "begin": "(?:(?:&&))",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.flat"
            }
          },
          "patterns": [
            {
              "include": "#L7"
            }
          ],
          "end": "(?<!(?:(?:&&)))"
        }
      ]
    },
    "L9": {
      "name": "meta.expression.L9.flat",
      "patterns": [
        {
          "include": "#L8"
        },
        {
          "name": "meta.expression.lor",
          "begin": "(?:(?:\\|\\|))",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.flat"
            }
          },
          "patterns": [
            {
              "include": "#L8"
            }
          ],
          "end": "(?<!(?:(?:\\|\\|)))"
        }
      ]
    },
    "L10": {
      "name": "meta.expression.L10.flat",
      "patterns": [
        {
          "include": "#L9"
        },
        {
          "name": "meta.expression.assign.flat",
          "begin": "(?:(?:=)(?!(?:(?:==))))",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.flat"
            }
          },
          "patterns": [
            {
              "include": "#L10"
            }
          ],
          "end": "(?<!(?:(?:=)))"
        }
      ]
    }
  },
  "scopeName": "source.flat"
}
